generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ============================================================
 * üë§ USER MODEL ‚Äî Core user identity
 * ============================================================
 */
model User {
  id              String       @id @default(cuid())
  uid             String       @unique // Firebase UID
  email           String       @unique
  name            String?
  avatarUrl       String?
  role            Role         @default(USER)
  status          String       @default("ACTIVE")
  primaryProvider AuthProvider @default(PASSWORD)
  emailVerified   Boolean      @default(false)
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?
  isApproved      Boolean      @default(false)
  termsAcceptedAt DateTime?
  deletedAt       DateTime? // soft delete
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  sessions  Session[]
  auditLogs AuditLog[] @relation("UserAuditLogs")

  @@index([uid])
  @@index([email])
  @@index([role])
  @@index([status])
}

/**
 * ============================================================
 * üîê SESSION MODEL ‚Äî Backend session cookies
 * ============================================================
 */
model Session {
  id          String    @id @default(cuid())
  tokenHash   String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress   String?
  userAgent   String?
  device      String? // optional: "Chrome on Windows"
  createdAt   DateTime  @default(now())
  refreshedAt DateTime? // optional: when cookie renewed
  revokedAt   DateTime?
  expiresAt   DateTime

  @@index([userId, expiresAt])
  @@index([expiresAt])
  @@index([tokenHash])
}

/**
 * ============================================================
 * üßæ AUDIT LOG MODEL ‚Äî System event logs
 * ============================================================
 */
model AuditLog {
  id        String      @id @default(cuid())
  userId    String?
  user      User?       @relation("UserAuditLogs", fields: [userId], references: [id], onDelete: SetNull)
  action    AuditAction
  message   String?
  metadata  Json?
  source    String? // e.g. "auth", "api", "admin"
  severity  String? // e.g. "INFO", "WARN", "ERROR"
  requestId String?
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())

  @@index([userId, createdAt])
  @@index([action, createdAt])
}

/**
 * ============================================================
 * üß© ENUMS ‚Äî Type-safe states & roles
 * ============================================================
 */
enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum AuthProvider {
  GOOGLE
  PASSWORD
  CUSTOM
}

enum AuditAction {
  USER_SIGNUP
  USER_LOGIN
  USER_LOGOUT
  USER_LOGOUT_FAILED
  USER_LOGOUT_NO_COOKIE
  USER_LOGOUT_ERROR
  SESSION_REFRESH
  SESSION_REVOKE
  USER_UPDATE
  USER_APPROVE
  USER_SUSPEND
  USER_DELETE
  PASSWORD_RESET
  PASSWORD_CHANGE
  EMAIL_VERIFIED
  RATE_LIMIT_HIT
}
